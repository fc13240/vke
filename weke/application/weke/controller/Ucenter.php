<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2017/10/27 0027
 * Time: 15:16
 */
namespace app\weke\controller;
use app\weke\model\Member;
use app\weke\controller\Common;
use app\weke\model\MemberFootprint;

class Ucenter extends Common
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->checkLogin();
    }

    //个人中心首页
    public function center()
    {
        $user_id = $this->user_id;
        $user_info = $this->user_info;

        //根据user_id判断用户是不是首次登录
        $is_first = Member::where('member_id','eq',$user_id)->value('is_first_login');
        $data = [
            'head_image' => $user_info ? $user_info['head_image'] : '',
            'user_name'  => $user_info ? $user_info['member_name '] : '',
            'user_acer'  => $user_info ? $user_info['member_acer'] : '',
        ];
        if($is_first == 1){
            //首次登录补充个人信息提示语
            $mark = "请点击头像完善个人资料";
            $data['mark'] = $mark;
        }
        Member::where('member_id',$user_id)->update(['is_first_login'=>2]);
        return [
            'status'     => '1',
            'message'    => '请求成功',
            'data' => $data

        ];
    }



    //添加订单页面
    public function addOrderPage()
    {
        $addOrderHelp = db('help')
            ->where('type','eq','2')
            ->where('status','eq','1')
            ->order('sorts','desc')
            ->field('image_url,content')
            ->select();
        return [
            'status' => '1',
            'message' => '请求成功',
            'order_help' => $addOrderHelp
        ];
    }

    //添加订单操作
    public function addOrder()
    {
        $orderNum = input('order_num');
        $data['order_num'] = $orderNum;

        $validate = new User;
        $result   = $validate->scene('order')->check($data);
        if(!$result){
            return [
                'status' => '0',
                'message' => $validate->getError()
            ];
        }
        //将订单号储存数据库，后续处理逻辑


    }


    /**
     * 获取浏览历史信息*2017.10.31*freedom
     */
    public function getFootPrint()
    {
        //首先判断是否登录
        $user_id = $this->user_id;
        $cookie_print = cookie('weke_gootprint');
        if(!empty($user_id)){ //已经登录,查看cookie中是否有浏览历史
            //再查询该会员数据库浏览历史
            $history = db('member_footprint')
                ->where('member_id',$user_id)
                ->order('number','desc')
                ->select();
            foreach($history as $key => $value){
                $cookie_print[$value['product_id']] = ['num'=>$value['number'],'time'=>$value['time']];
            }

        }
            //按浏览的次数排序,浏览次数相同,按时间倒叙
            $array = $this->wpjam_array_multisort($cookie_print,'num');
            //根据该浏览历史的商品id调用接口查询商品信息
            $productList = [];
            return [
                'status' => '1',
                'message' => '请求成功',
                'data' => [
                    'history' => $productList
                ]
            ];
    }

    /**
     * 二维数组排序
     * @param $array
     * @param $orderby
     * @param int $order
     * @param int $sort_flags
     * @return mixed
     */
    function wpjam_array_multisort($array, $orderby, $order = SORT_DESC, $sort_flags = SORT_REGULAR ){
        $refer = array();
        foreach ($array as $key => $value) {
            $refer[$key] = $value[$orderby];
        }
        array_multisort($refer, $order, $sort_flags, $array);
        return $array;
    }

    /**
     * 签名*2017.10.31*freedom
     * @return array
     */
    public function doSign()
    {
        $user_id = $this->user_id = 1;
        if(empty($user_id)){
            return [
                'status' => '0',
                'message' => '请登录'
            ];
        }
        //进行签到
        return model('MemberSign')->com_do_sign($user_id);
    }

}