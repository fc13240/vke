<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2017/11/13
 * Time: 9:26
 */

namespace app\admin\controller;
use app\common\controller\Base;
use think\Request;


class Goods extends Base
{
    protected $request;

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->request = Request::instance();
    }

    /**
     *菜单管理-搜索条件-20171113
     */
    public function goodsSearchList()
    {
        //佣金
        $brokerage = model('SearchCondition')->getSearchCondition(1);
        $condition3 = [];
        foreach ($brokerage as $key => $value) {
            if (!empty($value['condition_min']) && !empty($value['condition_max'])) {
                $condition3[] = [
                    'key' => $value['condition_min'] . '%--' . $value['condition_max'] . '%',
                    'value' => [
                        'condition3_min' => $value['condition_min'],
                        'condition3_max' => $value['condition_max']
                    ]

                ];
            } elseif (!empty($value['condition_min'])) {
                $condition3[] = [
                    'key' => $value['condition_min'] . '%以上',
                    'value' => [
                        'condition3_min' => $value['condition_min'],
                        'condition3_max' => $value['condition_max']
                    ]

                ];
            } elseif (!empty($value['condition_max'])) {
                $condition3[] = [
                    'key' => $value['condition_max'] . '%以下',
                    'value' => [
                        'condition3_min' => $value['condition_min'],
                        'condition3_max' => $value['condition_max']
                    ]

                ];
            }
        }
        //券额
        $coupon = model('SearchCondition')->getSearchCondition(2);
        $condition4 = [];
        foreach ($coupon as $key => $value) {
            if (!empty($value['condition_min']) && !empty($value['condition_max'])) {
                $condition4[] = [
                    'key' => $value['condition_min'] . '元--' . $value['condition_max'] . '元',
                    'value' => [
                        'condition4_min' => $value['condition_min'],
                        'condition4_max' => $value['condition_max']
                    ]

                ];
            } elseif (!empty($value['condition_min'])) {
                $condition4[] = [
                    'key' => $value['condition_min'] . '元以上',
                    'value' => [
                        'condition4_min' => $value['condition_min'],
                        'condition4_max' => $value['condition_max']
                    ]
                ];
            } elseif (!empty($value['condition_max'])) {
                $condition4[] = [
                    'key' => $value['condition_min'] . '元以下',
                    'value' => [
                        'condition4_min' => $value['condition_min'],
                        'condition4_max' => $value['condition_max']
                    ]

                ];
            }
        }
        $condition1 = [
            [
                'key' => '全部',
                'value' => ''
            ],
            [
                'key' => '最新',
                'value' => '1'
            ]
        ];
        $condition2 = [
            [
                'key' => '状态',
                'value' => ''
            ],
            [
                'key' => '展示',
                'value' => '1'
            ],
            [
                'key' => '未展示',
                'value' => '2'
            ]
        ];
        $condition5 = [
            [
                'key' => '即将领完',
                'value' => '2'
            ]
        ];
        $result = [
            'data' => [
                'condition1' => $condition1,
                'condition2' => $condition2,
                'condition3' => $condition3,
                'condition4' => $condition4,
                'condition5' => $condition5
            ]
        ];

        return resultArray($result);
    }

    /**
     * 菜单管理-商品列表-20171113
     */
    public function goodsList()
    {
        $request = $this->request;
        $map = [];
        //接收查询条件1:全部,最新(近两日)
        $yesterday = date('Y-m-d', strtotime('-1 days')) . ' 00:00:00';
        $today = date('Y-m-d', time()) . ' 23:59:59';
        $condition1 = $request->post('condition1');
        if (!empty($condition1) && $condition1 = 1) {
            $map['create_time'] = ['between', [$yesterday, $today]];
        }
        //查询条件2:状态,展示,未展示
        $condition2 = $request->post('condition2');
        if (!empty($condition2)) {
            $map['on_sale'] = $condition2;
        }
        //查询条件3:佣金定位
        $condition3_min = $request->post('condition3_min');
        $condition3_max = $request->post('condition3_max');
        if (!empty($condition3_min) && !empty($condition3_max)) {
            $map['brokerage'] = ['between', [$condition3_min, $condition3_max]];
        } elseif (!empty($condition3_min)) {
            $map['brokerage'] = ['gt', $condition3_min];
        } elseif (!empty($condition3_max)) {
            $map['brokerage'] = ['lt', $condition3_max];
        }
        //查询条件4:券额
        $condition4_min = $request->post('condition4_min');
        $condition4_max = $request->post('condition4_max');
        if (!empty($condition4_min) && !empty($condition4_max)) {
            $map['coupon_number'] = ['between', [$condition4_min, $condition4_max]];
        } elseif (!empty($condition4_min)) {
            $map['coupon_number'] = ['gt', $condition4_min];
        } elseif (!empty($condition4_max)) {
            $map['coupon_number'] = ['lt', $condition4_max];
        }

        //接收每页显示数据条数
        $page_limit = $request->post('page_limit');
        if(empty($page_limit)){
            return resultArray(['error'=>'请输入每页显示数据条数']);
        }

        $path = getPath();

        //查询条件5:期限,即将领完.即将过期
        $condition5 = $request->post('condition5');
        if (!empty($condition5) && $condition5 == '2') { //即将领完
            $map['stock'] = ['lt', 10];
        }
        //执行查询
        $fields = 'id,pict_url,title,brokerage,zk_final_price,coupon_number,stock';
        $goodsList = model('Product')->getGoodsList($map, $fields,$path,$page_limit);
        $page = $goodsList->render();
        $result = [
            'data' => [
                'goods_list' => $goodsList,
                'page' => $page
            ]
        ];
        return resultArray($result);
    }

    /**
     * 管理-商品管理-商品分类-20171113
     */
    public function cateList()
    {
        $cateList = model('CateType')->getCatelist(1, 0);
        $result = [
            'data' => [
                'cate_list' => $cateList
            ]
        ];
        return resultArray($result);
    }

    /**
     *管理-商品管理-商店分类-20171113
     */
    public function storeList()
    {
        $fields = 'id,store_name';
        $cateList = model('StoreType')->getStoreList($fields);
        $result = [
            'data' => [
                'store_list' => $cateList
            ]
        ];
        return resultArray($result);
    }

    /**
     * 批量处理-商品分类-20171113
     */
    public function goodsCategory()
    {
        $request = $this->request;
        //接受被分类的商品id
        $goods_id = $request->post('goods_id');
        //接受分类id
        $cate_id = $request->post('cate_id');

        //验证数据
        auto_validate('Goods', ['goods_id' => $goods_id, 'cate_id' => $cate_id], 'cate');
        //执行修改
        $map['id'] = ['in', $goods_id];
        $data['product_type'] = $cate_id;
        $result_cate = model('Product')->where($map)->update($data);
        if ($result_cate !== false) {
            $result = [
                'data' => [
                    'message' => '操作成功'
                ]
            ];
        } else {
            $result = [
                'error' => '操作失败'
            ];
        }

        return resultArray($result);
    }

    /**
     * 批量处理-商店分类-20171113
     */
    public function storeCategory()
    {
        $request = $this->request;
        //接受被分类的商品id
        $goods_id = $request->post('goods_id');
        //接受分类id
        $store_id = $request->post('store_id');

        //验证数据
        auto_validate('Goods', ['goods_id' => $goods_id, 'store_id' => $store_id], 'store');
        if($store_id == 2){ //粉丝福利,查询粉丝福利返元宝数
            $fans_acer = model('StoreType')->getFansAcer();
            $data['fans_acer'] = $fans_acer;
        }
        //执行修改
        $map['id'] = ['in', $goods_id];
        $data['store_type'] = $store_id;
        $result_cate = model('Product')->where($map)->update($data);
        if ($result_cate !== false) {
            $result = [
                'data' => [
                    'message' => '操作成功'
                ]
            ];
        } else {
            $result = [
                'error' => '操作失败'
            ];
        }

        return resultArray($result);
    }


    /**
     * 数据库内商品总数 - 20171113
     */
    public function goodsCount()
    {
        $count = model('Product')->getGoodsCount();
        $result = [
            'data' => [
                'count' => $count
            ]
        ];

        return resultArray($result);

    }
}