<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2017/11/13
 * Time: 14:37
 */

namespace app\admin\controller;
use app\common\controller\Base;
use think\Request;
use think\Db;

class Order extends Base
{
    protected $request;
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->request = Request::instance();
    }

    /**
     * 管理-订单管理-订单列表 - 20171113
     */
    public function orderList()
    {
        $request = $this->request;
        //接收筛选条件-下单日期
        $start = $request->post('start');
        $end = $request->post('end');
        //类别 1充值 2提现 3实物
        $type = $request->post('goods_type');

        $express_status = $request->post('express_type');
        $map = [];
        if(!empty($start) && !empty($end)){
            $map['exchange_time'] = ['between',[$start.' 00:00:00',$end.' 23:59:59']];
        }
        elseif(!empty($start)){
            $map['exchange_time'] = ['gt',$start.' 23:59:59'];
        }
        elseif(!empty($end)){
            $map['exchange_time'] = ['lt',$end.' 00:00:00'];
        }




        if(!empty($type)){
            if($type == 1){
                $map['product_type'] = 1;
                $map['type'] = 1;
            }
            elseif($type == 2){
                $map['product_type'] = 1;
                $map['type'] = 2;
            }
            elseif($type == 3){
                $map['product_type'] = 2;
            }

        }

        if(!empty($express_status)){
            $map['express_status'] = $express_status;
        }
        //查询订单
        $orderList = model('ExchangeOrder')->getOrderList($map);

        $result = [
            'data' => [
                'order_list' => $orderList
            ]
        ];
        return resultArray($result);
    }

    /**
     * 管理-订单管理-发货操作 - 20171113
     */
    public function diliver()
    {
        $request = $this->request;
        //接受订单id
        $order_id = $request->post('order_id/a');
        if(empty($order_id)){
            return resultArray(['error'=>'请选择发货订单']);
        }
        $map['order_id'] = ['in',$order_id];
        //验证该订单状态
        $fields = 'is_able,status,order_num,express_status';
        $orderInfo = model('ExchangeOrder')->getOrderInfo($map,$fields);
        if(empty($orderInfo)){
            return resultArray(['error'=>'订单信息不存在']);
        }
        foreach($orderInfo as $key => $value){
            if($value['status'] == 1 || $value['is_able'] == 2 || $value['express_status'] != 1){
                return resultArray(['error'=>'订单号:'.$value['order_num'].'为无效订单']);
            }
        }

        //执行修改
        $data['express_status'] = 2;
        $result_edit = model('ExchangeOrder')->editData($map,$data);
        if($result_edit !== false){
            $result  = [
                'data' => [
                    'message' => '发货成功'
                ]
            ];
        }else{
            $result = [
                'error' => '发货失败'
            ];
        }
        return resultArray($result);
    }

    /**
     * 未处理订单个数 - 20171124
     */
    public function getOrderNum()
    {
        //查两张表(返利订单表和元宝商城表)
        $number_one = model('Order')->getOrderNumber();
        $number_two = model('ExchangeOrder')->getNumber();
        $number = $number_one + $number_two;

        $data = [
            'data' => [
                'number' => $number
            ]
        ];
        return resultArray($data);
    }

    /**
     * 返利订单审核-列表 - 20171116
     */
    public function backOrderList()
    {
        //接收查询的订单时间
        $start_date = input('post.start');
        $end_date = input('post.end');
        $status = input('post.status');

        if(empty($start_date) || empty($end_date)){
            $end_date = date('Y-m-d',time());
            $start_date = date('Y-m-d',time()-7*86400);
        }
        auto_validate('ShareData',['start'=>$start_date,'end'=>$end_date],'select');

        if(!empty($status)){
            $map['back_status'] = $status;
        }
        $map['create_time'] = ['between',[$start_date,$end_date]];
        //执行查询
        $order_list = model('order')->getOrderList($map);
        $data = [
            'data' => [
                'order_list' => $order_list,
                'start' => $start_date,
                'end' => $end_date
            ]
        ];
        return resultArray($data);
    }

    public function examineOrder()
    {
        $order_num = Request::instance()->post('order_num/a');
        $status = Request::instance()->post('status');
        switch($status){
            case 1:
                return $this->aggreeOrder($order_num);
                break;
            case 2:
                return $this->refuseOrder($order_num);
                break;
        }
    }

    /**
     * 订单通过奖励 - 20171127
     */
    public function aggreeOrder($order_num)
    {
        //订单id
        if(empty($order_num)){
            return resultArray(['error'=>'请选择订单']);
        }
        $map['order_num'] = ['in',$order_num];
        //验证订单是否存在
       $this->checkOrder($order_num);

        //订单验证通过后执行修改
        $member_id = model('Order')->getMemberId($order_num);
        $edit_data = [
            'back_status' => 1,
            'update_time' => date('Y-m-d H:i:s',time())
        ];


        Db::startTrans();
        try{
            Db::name('order')->where($map)->update($edit_data);
            foreach($member_id as $key => $value){
                Db::name('member')->where('member_id',$value['member_id'])->setInc('member_acer',$value['back_acer']);
            }
            Db::commit();

            //记录元宝交易流水
            foreach($member_id as $key => $value){
                $note_data[] = [
                    'member_id' => $value['member_id'],
                    'type' => '1',
                    'number' => $value['back_acer'],
                    'before' => $value['back_acer'],
                    'after' => $value['member_acer'] + $value['back_acer'],
                    'class' => 1,
                    'msg' => '粉丝福利赠送元宝'
                ];
            }
            Db::name('acer_notes')->insertAll($note_data);
            $data = [
                'data' => [
                    'message' => '操作成功'
                ]
            ];
        }catch(\Exception $exception){
            Db::rollback();
            $data = [
                'error' => '操作失败'
            ];
        }
        return resultArray($data);
    }

    /**
     * 订单未通过 - 20171127
     */
    public function refuseOrder($order_num)
    {
        //订单id
        if(empty($order_num)){
            return resultArray(['error'=>'请选择订单']);
        }
        $map['order_num'] = ['in',$order_num];
        //验证订单是否存在
        $this->checkOrder($order_num);

        //订单验证通过后执行修改
        $edit_data = [
            'back_status' => 3,
            'update_time' => date('Y-m-d H:i:s',time())
        ];
        $result_edit = model('Order')->editData($map,$edit_data);
        if($result_edit !== false){
            $data = [
                'data' => [
                    'message' => '操作成功'
                ]
            ];
        }else{
            $data = [
                'error' => '操作失败'
            ];
        }

        return resultArray($data);
    }

    /**
     * 验证订单是否存在 - 20171127
     */
    public function checkOrder($order_num)
    {
        $map['order_num'] = ['in',$order_num];
        if(is_array($order_num)){
            $order_info = model('Order')->where($map)->column('order_num');
            //两数组差集
            $diff_if = array_diff($order_num,$order_info);
            if(!empty($diff_if)) {
                if (count($diff_if) >= 2) {
                    $resturn_number = implode(',', $diff_if);
                } elseif (count($diff_if) == 1) {
                    $resturn_number = $diff_if[0];
                }
                ajaxReturn(['error' => '以下单号不存在' . $resturn_number]);
            }
        }else{
            $order_info = model('Order')->where($map)->value('id');
            if(empty($order_info)){
                ajaxReturn(['error'=>'该订单号不存在']);
            }
        }
    }
}